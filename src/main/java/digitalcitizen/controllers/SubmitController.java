package digitalcitizen.controllers;

import digitalcitizen.Application;
import digitalcitizen.models.Submission;
import digitalcitizen.repositories.SubmissionRepository;
import digitalcitizen.utilities.PDFManager;
import digitalcitizen.utilities.SubmissionValidator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;

@RestController
public class SubmitController {

    private ArrayList<Submission> submissions = new ArrayList<>();

    @Autowired
    private SubmissionRepository submissionRepository;

    /**
     * This method receives and handles applications submitted on the route "/send".
     *
     * @param submission An application in JSON format. Converted to {@link Submission} by Spring.
     * @param request    HTTP request sent by the user. Containing client information.
     * @return A submission identification used in {@link #getPDF(String)} to generate a PDF.
     * @throws IOException
     */
    @CrossOrigin
    @RequestMapping(value = "/send", method = RequestMethod.POST)
    public
    @ResponseBody
    String post(@RequestBody final Submission submission, HttpServletRequest request) throws IOException {

        // Validate form
        printSubmissionRequest(submission, request);
        boolean submissionIsValid = new SubmissionValidator().validateAllFields(submission);

        // TODO: Add logic for handling disapproved submissions
        /*
        if(!submissionIsValid) {
            return "";
        }*/

        if (Application.USE_MONGODB) {
            // Add submission to database
            System.out.println("Saving submission to database..");
            String submissionId = submissionRepository.insert(handleSubmissionFields(submission)).getId();
            System.out.println("Submission (" + submissionId + ") was successfully added to the database");

            // Return the id of the submission
            return submissionId;
        }

        submissions.add(handleSubmissionFields(submission));

        // Return the id of the submission
        return Integer.toString(submissions.size() - 1);
    }

    /**
     * A method that handles the individual fields of the application.
     * This includes looking up and updating person data, based upon the
     * information given, such as pnr, name and address.
     *
     * @param submission The {@link Submission} to be reviewed.
     * @return The updated {@link Submission}
     */
    private Submission handleSubmissionFields(Submission submission) {
        if (submission.getPerson().getPnr() != null && !submission.getPerson().getPnr().equals("")) {
            submission.getPerson().updateValuesByPnr();
        }
        return submission;
    }

    /**
     * Generates and returns a PDF of a submitted application when request on the route
     * /getpdf with an "id" parameter (Generated by {@link #post(Submission, HttpServletRequest)}.
     *
     * @param id The id of the submission we want to generate a PDF-file from.
     * @return HTTP containing the generated PDF-file
     * @throws IOException
     */
    @CrossOrigin
    @RequestMapping(value = "/getpdf", params = "id", method = RequestMethod.GET)
    public ResponseEntity<byte[]> getPDF(@RequestParam("id") String id) throws IOException {

        Submission submission;
        if (Application.USE_MONGODB) {
            // Get Submission from database by the provided id
            submission = submissionRepository.findById(id);
        } else {
            submission = submissions.get(Integer.parseInt(id));
        }

        // Generate PDF of the submission
        PDFManager pdfManager = new PDFManager();
        Path path = Paths.get(pdfManager.generatePDFofSubmission(submission));
        byte[] contents = Files.readAllBytes(path);

        // Add required headers and metadata
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.parseMediaType("application/pdf"));
        String filename = "SÃ¸knad.pdf";
        headers.setContentDispositionFormData(filename, filename);
        headers.setCacheControl("must-revalidate, post-check=0, pre-check=0");

        // TODO: Authenticate the user before sending the PDF-file
        return new ResponseEntity<>(contents, headers, HttpStatus.OK);
    }

    private void printSubmissionRequest(Submission submission, HttpServletRequest request) {
        String s = "Submission received from: " + request.getRemoteAddr()
                + '\n' + submission;
        System.out.println(s);
    }
}


